==============================================
Some misc notes from Munich training, May 2014
==============================================

In general, I think the course provided a great overview of Plone.
As suggested in the post-training feedback session, I think the course covered
too much for absolute beginners, and perhaps not enough for those who've been using Plone for some time.


General Comments / suggestions
==============================

When a new and old way of doing things exists, do not even mention
the old way to 'new' trainees.
In the munich training, most people of have not used plone for <= 1 yr,
so ancient dragons, even if they still are present but sleeping, need not be awoken in the minds of the new.

Important things learnt
=======================
 - Never log in to a public site with the Zope user, as the username 
   and password will be in the request headers (base64 encoded)

Funny comments
===============
* Trouble with grok is sometimes you ask for a banana and get a gorilla holding a banana. 

* If you have a site that has to be mainained for a number of years, and go though upgrades, be sure to invest time in investiating addons you use. If you choose an addon such as **singing and dancing**, you will cry inside for years. (!!)

Not covered / problems
======================
 - plone.app.testing
  - Use of <includeDependencies> in ZCML and how that can pull in too much (e.g extra) - should be avoided IHMO, and probably should
    not be part of the configure.zcml generated by ZopeSkel.
 - ZopeSkel problem reared its head
 - Training uses zopeskel from Unified installer, which creates outdated stuff that trainees were asked to delete

 - Addendum of "What works for me":
    - templer for projects
    - Latest zopeskel in the 2.x line (not 3.x which is for templer)

TAL/Page Templates - Explaining nocall:
========================================
Not a 'generator' at all (as Philip said)
Better to provide an example in the python interactive interpretter such as:

>>> a = dict(a=1, b=1)
>>> keys = a.keys # nocall:a/keys
>>> keys()

Explaining BrowserView
======================
No need to explain the __init__ metthod in the browser view for newbies?
Better to just say - do not put any customizations in the __init__ method
for your browser view, do it in __call__.

Perhaps the above is relevant only to a course for newbies, but should/could be explained in an 'advanced' course.

Accessing field on brains
=========================
I believe code should be using __getitem__ syntax instead of getattr, eg:

.. code-block: python

     title = brain['Title']

instead of:

.. code-block: python

     title = brain.title
     
     
Reduce complexity in upgradeSteps
==================================
Use the 'Folder addable constraints' behaviour rather than manually doing so in a custom Generic upgradeStep
http://starzel.github.io/training/user_generated_content.html?highlight=constrain
Visit @@dexterity-types / behaviors to see what I mean...
I think this would require:
  
  * Adding a line <behaviour> in the generic setup profile for the type
  * re-installing the addon
  
Addons to consider/investigate
==============================
 * collective.mailchimp  (commercial) Timo Stollenburg
 * collective.quickupload (Drag & drop multiple files)
 * FTWUpgrade
 * Products.PDBDebugMode
 * plone.app.debugtoolbar
 ZMI 'snapshot tool'
 
 Usage of ZMI to get the XML required for a package
 ===================================================
  
  * Import/Export of GS XML in ZMI, ups and downs (too much output, not sure what to delete/keep) 
  * Discussed possiblity of writing an addon to fix this with Patrick Gerken

